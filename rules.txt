[
  {
    id: 1,
    domain: 'Security',
    service: 'Account ',
    rule: 'Alert upon Login from Invalid IP Addresses',
    ruledescription: 'Notifications on invalid external IP console logins',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user logs in from an invalid IP address. If the source IP address of the event is outside of the provided ranges in the policy then notify the admins security team for further investigation. Using the cloudtrail mode provides near real-time auto-remediation (typically within 1-2 minutes) of the event occurring. Having such a quick auto-remediation action greatly reduces an attack window! By notifying the cloud admins or security team they can validate the login and revoke the login session if it’s not valid followed by changing the password for or disabling the compromised user etc.',
    fixby: null
  },
  {
    id: 2,
    domain: 'Security',
    service: 'Account ',
    rule: 'Detect Root Account Logins',
    ruledescription: 'Notifications on any AWS root user console logins',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime the root user of the account logs in. Typically the root user of an AWS account should never need to login after the initial account setup and root user access should be very tightly controlled with hardware MFA and other controls as root has full control of everything in the account. Having this visibility to see if and when someone logs in as root is very important.',
    fixby: null
  },
  {
    id: 3,
    domain: 'Security',
    service: 'EC2 ',
    rule: 'Terminate Unpatchable Instances ELB ',
    ruledescription: 'Mark any stopped ec2 instance for deletion in 60 days',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Policy workflow will find and tag any instances that are in a stopped state. Create custom tag for stopped instance and use the value of the tag to terminate for 60 days in the future. The reasoning behind terminating unpatchable instances is after 60 days the instance will be far enough behind on patching and virus defs(if used) that starting the instance after 60 days would present too large of a security risk.',
    fixby: null
  },
  {
    id: 4,
    domain: 'Security',
    service: 'EC2 ',
    rule: 'Delete New Internet-Facing ELBs',
    ruledescription: 'Any newly created Classic Load Balanacers launched with a internet-facing schema will be deleted right away',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user creates a new classic Elastic Load Balancer. If the ELB is set to be internet-facing then delete it right away at launch. This provides near real-time auto-remediation (typically within 1-2 mins) of the ELB being created. Having such a quick auto-remediation action greatly reduces an attack window! By notifying the customer who tried to perform the action it helps drive user behaviour as well and lets them know why their ELBs keep deleting at launch! ',
    fixby: null
  },
  {
    id: 5,
    domain: 'Security',
    service: 'EC2 ',
    rule: 'Scan ELBs for Blacklisted protocols ',
    ruledescription: 'HTTPS/SSL ELBs should only have whitelisted ciphers/protocol',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 6,
    domain: 'Security',
    service: 'EBS ',
    rule: 'Terminate unencrypted EBS volumes upon creation',
    ruledescription: 'Terminate all unencrypted EBS volumes upon creation',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 7,
    domain: 'Security',
    service: 'IAM',
    rule: 'Detect and Remediate Security Group Violations ',
    ruledescription: 'Remove any rule from a security group that allows 0.0.0.0/0 or ::/0 (IPv6) ingress and notify the user who added the violating rule',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user creates or modifies a security group. This provides near real-time auto-remediation action (typically within a minute) of the security group change. Having such a quick auto-remediation action greatly reduces any attack window! By notifying the customer who tried to perform the action it helps drive user behaviour and lets them know why the security group keeps reverting their 0.0.0.0/0 rule additions on them',
    fixby: null
  },
  {
    id: 8,
    domain: 'Security',
    service: 'RDS ',
    rule: 'Terminate Unencrypted Public Instances',
    ruledescription: 'Terminate all unencrypted or publicly available RDS upon creation',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 9,
    domain: 'Security',
    service: 'RDS ',
    rule: 'Enforce SSL for DB Endpoints',
    ruledescription: 'Turn on Require SSL setting for SQL, Mongo & Postgres SQL DBs',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'With sqlserver, mongodb, and postgres turn on the SSL mode to require without having to pass in a certificate. Most other database engines would require you to pass in the ARN of the CA certificate to use. DMS certificate ARNS are unique per account and region which is why multi-account policy runs wouldn’t work. Both policies trigger off the creation or modification of any DMS endpoints so if a user tries to disable the SSL it would re-enable the SSL or delete the users endpoint and then email them depending on SSL modes supported. For the notify action in the second policy to work setup the mailer tool',
    fixby: null
  },
  {
    id: 10,
    domain: 'Security',
    service: 'S3 ',
    rule: 'Block Public S3 Object ACLs',
    ruledescription: 'Prevent any object in these buckets from being set to public-read, public-read-write ,or authenticated-read ',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Append a S3 bucket policy to every S3 bucket with a policy statement called DenyS3PublicObjectACL This will prevent any object in these buckets from being set to public-read, public-read-write ,or authenticated-read (Any authenticated AWS user, not just local to account). Being that S3 object permissions can be hard to track and restrict due to the huge amount of S3 objects usually present in accounts, this policy prevents the issue from occurring in the first place and helps maintain tighter S3 security to avoid accidentally setting sensitive S3 objects to public. The S3 bucket policy has a NotPrincipal statement with several “AWS”: arns. These arns are owned by AWS and they are used for the AWS logging services for Log Delivery Group, ELB Logs, and Redshift Logs. The ELB and Redshift arns are region specific (sample includesus-east-1 and eu-west-1) so depending on the regions you are utilizing you might need to add or remove addtional arns ',
    fixby: null
  },
  {
    id: 11,
    domain: 'Security',
    service: 'S3 ',
    rule: 'Enable Encryption for all S3 Buckets ',
    ruledescription: 'scan all S3 buckets for unencrypted keys and by default remediate them such that they are encrypted',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 12,
    domain: 'Security',
    service: 'S3 ',
    rule: 'Delete Global Grants on S3 Buckets',
    ruledescription: 'Scan S3 buckets that allow for global access in their ACLs and delete the associated ACL permissions',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 13,
    domain: 'Monitoring',
    service: 'VPC ',
    rule: 'Flow Log Configuration Check',
    ruledescription: null,
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Find any VPC Flow Log in your region that is not properly configured and notify a group via email. Ensuring VPC Flow Logs are enabled and setup properly is very important for compliance and security. Flow Logs themselves capture IP traffic information to and from network interfaces and can be used for troubleshooting traffic issues and monitoring network traffic as a security tool. Dashboard of VPC Flow Logs using Elasticsearch and Kibana',
    fixby: null
  },
  {
    id: 14,
    domain: 'Monitoring',
    service: 'VPC ',
    rule: 'Notify On Invalid External Peering Connections',
    ruledescription: null,
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a new VPC Peering Connection is created. The policy will then check to see if the peering accepter account id and peering requester account id are both AWS account numbers owned by you. This is done by having the account ids from the CloudWatch Event compared against a S3 hosted CSV of your AWS account numbers. You must provide the CSV file of your account numbers or you can hardcode your account numbers into the policy if you have a small static number of accounts',
    fixby: null
  },
  {
    id: 15,
    domain: 'Security',
    service: 'M/L',
    rule: 'Delete Public or Unencrypted SageMaker Notebooks',
    ruledescription: 'When a new Sagemaker notebook is created tag the creators ID to CreatorName tag ',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Detect if new SageMaker Notebooks are internet-facing (public) or unencrypted (not using KMS) at launch and then tag, stop, and delete the notebook and email the customer and cloud custodian admin. SageMaker Notebooks cannot be deleted unless they are in a Stopped status and they cannot be stopped until they are in a InService status which is why this needs a chain of policies that will trigger in order using tags and scheduled Lambda runs',
    fixby: null
  },
  {
    id: 16,
    domain: 'Instance Clean up ',
    service: 'Account',
    rule: 'Service Limit',
    ruledescription: 'Find any service in your region that is using more than 50% of the limit and raise the limit for 25%',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 17,
    domain: 'Cost Optimization ',
    service: 'EC2',
    rule: 'Stop/restart resources during offhours',
    ruledescription: 'Offhours are based on current time of the machine that is running custodian. Note, in this case you could tag an instance with the following two tags: StopAfterHours: off=(M-F,18);tz=est; and StartAfterHours: on=(M-F,8). This would have the instance turn off every weekday at 6pm NY time, and turn on every day at 8am California time (since if no tz is set, it uses the default which is pt). Note when custodian runs, if it’s 6:00pm or 6:59 pm NY time, it will shut down the VM you tagged this way. The key is the hour integer on the NY clock matching 18. If custodian runs at 5:59pm or 7:00pm NY time, it won’t shut down the VM. Same idea for starting. The reason we filter for only seeing instances older than 1 hour, if a dev is on a VM that is shut down by the off hours schedule, and they turn it back on, if we run custodian again we don’t want to keep shutting down the VM on the dev repeatedly',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 18,
    domain: 'Security',
    service: 'EC2',
    rule: 'Stop EC2 instances using Unapproved AMIs',
    ruledescription: null,
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 19,
    domain: 'Instance Clean up ',
    service: 'EC2',
    rule: 'Auto-tag User Name on resources',
    ruledescription: 'this can work for other resources besides EC2, and the principalId is optional. principalId tag is useful if you want to enforce users not being able to shut down each others VMs unless their principalId matches (meaning they originally spun up the resource). ',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 20,
    domain: 'Instance Clean up ',
    service: 'EC2',
    rule: 'Garbage Collect Unattached Volumes',
    ruledescription: 'Mark any unattached EBS volumes for deletion in 30 days. Volumes set to not delete on instance termination do have valid use cases as data drives, but 99% of the time they appear to be just garbage creation',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 21,
    domain: 'Security',
    service: 'EC2',
    rule: 'Create and Manage Snapshots',
    ruledescription: 'Snapshot all EBS volumes attached to EC2 instances and copy the instances tags to the snapshot. Then when the snapshots are 7 days old they will get deleted so you always have a rolling 7 days worth of snapshots',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 22,
    domain: 'Cost Optimization ',
    service: 'EC2',
    rule: 'Old Instance Report',
    ruledescription: 'Report running instances older than 60 days ',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'The instance age filter allows for filtering the set of EC2 instances by their LaunchTime, i.e. all instances older than 60 or 90 days. The default date value is 60 days if otherwise unspecified. Configure a specific value for instance-age to report all instances older than 90 days.',
    fixby: null
  },
  {
    id: 23,
    domain: 'Instance Clean up ',
    service: 'EC2',
    rule: 'Power On For Scheduled Patching',
    ruledescription: null,
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Automatically create CloudWatch cron rate triggered Lambda functions in your account and region. The Lambda funtions will be triggered on the cron rate expression schedule you provide in the mode section of the policy. The following example policies find all EC2 instances that are both in a stopped state, and have a tag called Patch Group with a value of Linux Dev. Those instances are then started and tagged with an additional tag of PowerOffWhenDone and a value of True so that they can be stopped again after the patching window. Then all instances with the Linux Dev Patch Group get another tag called PatchingInProgress with a value of True. The PatchingInProgress tag can be used by other policies such as offhours policies where the presence of that tag would exclude it from being stopped by the offhours. When the patching window is done the last 2 policies in this example will remove the PatchingInProgress tag from all instances in that group and remove the PowerOffWhenDone tag and stop those instances that were previously stopped. The cron expressions for this example read as the following: cron(0 3 ? 1/1 SUN#1 *) means trigger on the 1st Sunday of every month at 3:00 UTC then cron(0 13 ? 1/1 SUN#1 *) is the same day at 13:00 UTC which allows for a 10 Hour patching window. Learn more on AWS cron rate expressions ',
    fixby: null
  },
  {
    id: 24,
    domain: 'Cost Optimization ',
    service: 'ASG',
    rule: 'Stop/restart resources during offhours ',
    ruledescription: 'Stop all ASGs with the custodian_downtime tag at 10pm daily and start them back up at 10am daily, leaving them off during weekends',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Use the mark-for-op action to mark a resource for action later. One common pattern to follow is to mark a resource with an operation (example: delete) in n days. In the subsequent days leading up to the marked date, run a unmark or untag policy if the resource has become compliant in the mean time.\n' +
      'You can use this principle to implement garbage collection on resources. In this example, Custodian will first mark all unattached EBS volumes for deletion. The next policy will then unmark any volume that has been attached and has the maid_status tag, indicating that it had been previously marked. Finally, the third policy will filter in any resources that have been marked and run the delete action.\n' +
      'It is important to note that the delete policy will need to be run on the day that the resource is marked for, else the resource will still exist in the account. The mark operation only tags the resource with metadata about the upcoming operation. Operationally, the policy still must be executed on the day that is specified in the tag.\n' +
      'Note: all resources that are marked-for-op up to and including the current date will be filtered in when utilizing the marked-for-op filter',
    fixby: null
  },
  {
    id: 25,
    domain: 'Instance Clean up ',
    service: 'ASG',
    rule: 'Verify ASGs have valid configurations',
    ruledescription: 'New ASG instances may fail to launch or scale! The following Autoscaling Groups have invalid AMIs, SGs, KeyPairs, Launch Configs, or Health Checks" action_desc: | "Actions Taken: Notification Only. Please investigate and fix your ASGs configuration to prevent you from having any outages or issues" ',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Check all AutoScaling Groups in the current account and region for configuration issues which could prevent the ASG from functioning properly or launching an instance. Then the ASG resource owner and a cloud admins group get an email showing the affected ASG(s).\n' +
      'The following ASG items are checked \n' +
      'invalid security groups\n' +
      'invalid key pair name\n' +
      'invalid launch config volume snapshots\n' +
      'invalid AMIs\n' +
      'invalid ELB health check',
    fixby: null
  },
  {
    id: 26,
    domain: 'Cost Optimization ',
    service: 'ELB ',
    rule: 'Delete Unused Elastic Load Balancers',
    ruledescription: 'Mark any ELB with no instances attached for deletion in 14 days. Also send an email to the ELB resource owner informing them its unused',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Find any ELB that isn’t attached to any instances and tag it with a delete flag and date 14 days out. The policy workflow will also email the ELB resource owner to inform them of the upcoming deletion if the ELB remains unused. If the customer adds an instance back to their ELB it will get unmarked so it doesn’t get deleted.',
    fixby: null
  },
  {
    id: 27,
    domain: 'Instance Clean up ',
    service: 'S3',
    rule: 'Configure New Buckets Settings and Standards',
    ruledescription: 'Ths following is triggered when a new S3 bucket is created - it applies the AWS AES256 Default Bucket Encryption, Tags the creators ID, enables object versioning, configures the bucket lifecycle and enables logging. ',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a new S3 bucket is created in that region. The policy then applies several configurations such as enabling the default S3 AES256 bucket encryption, turns on object versioning, creates a s3 object lifecycle, enables logging on the bucket, and tags the user that created the bucket. When using the toggle-logging action as shown below you must make sure the s3 bucket the logs are getting sent to already exists. Buckets can only send logs to logging buckets in the same region as it so you may need to create multiple logging buckets per account if you use more than 1 region. In the below example the logging buckets would be named using account and region like the following: 0123456789012-us-east-1-s3-logs The S3 bucket lifecycle will help to save S3 costs by getting rid of old object versions and moving objects from standard storage class to infrequent access storage after 180 days in this example.',
    fixby: null
  },
  {
    id: 28,
    domain: 'Cost Optimization ',
    service: 'RDS ',
    rule: 'Delete Unused Databases With No Connections',
    ruledescription: 'Take the average number of connections over 14 days for databases that are greater than 14 days old and notify the resources owner on any unused RDS and mark for delete action in 14 days.',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Find any RDS database that is older than 14 days that has had no connections to it in the last 14 days and tag it with a delete flag and date 14 days out. The policy workflow will also email the RDS resource owner to inform them of the upcoming stopping and deletion if the RDS remains unused. If a customer connects to the RDS before the 14 day window it will get unmarked so it doesn’t get deleted',
    fixby: null
  },
  {
    id: 29,
    domain: 'Instance Clean up ',
    service: 'Lambda ',
    rule: 'Notify On Lambda Errors',
    ruledescription: 'Hourly check that finds any Lambda functions that have any errors within the last hour and notifies the customer and Cloud Team',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Run hourly as a CloudWatch Scheduled Event triggered Lambda function. The policies filters will check each Lambda’s CloudWatch Metrics for errors. If there are any errors in an hour period and the Lambda function is not tagged with Custodian_Lambda_Error_Exclude then the policy will take the action of notifying the Lambda function owner and the cloud team. These notifications can help developers by informing them if unexpected errors occur so they can be quickly addressed. ',
    fixby: null
  },
  {
    id: 30,
    domain: 'Instance Clean up ',
    service: 'General ',
    rule: 'Tag Compliance across Resources (EC2, ASG, ELB, S3)',
    ruledescription: 'Enforce Tag Compliance- All EC2 non-AutoScaling instances that do not have the three required tags (CostCenter, Owner, Project) will be stopped hourly after 2 days, and terminated after 5 days. Report on Tag Compliance- Report on total count of non compliant instances. ',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: null,
    fixby: null
  },
  {
    id: 31,
    domain: 'Security',
    service: 'General ',
    rule: 'Block New Resources In Non-Standard Regions',
    ruledescription: 'Terminate any EC2 instance launched in a non standard region',
    risk: null,
    fixavailable: null,
    priority: null,
    taskremediation: 'Detect the region a resource is being launched in and delete the resource if it’s outside your standard approved regions. For example block the full creation of the resources launched outside of the us-east-1 and eu-west-1 regions and then email the event-owner (the person launching the resource) and the Cloud Team. This covers several of the common AWS services but additional services could be added if supported by Cloud Custodian. While a proactive approach through IAM or AWS Organizations policies is the ideal way to go, that isn’t always possible or manageable for all users. These policies take a reactive approach and may be a fitting use case for some users',
    fixby: null
  }
]